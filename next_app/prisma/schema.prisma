generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  USER
  TEACHER
}

enum PublishStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}

model User {
  id            String    @id @default(cuid())
  email         String    @unique
  password      String
  role          Role      @default(USER)
  name          String?
  emailVerified DateTime?
  image         String?

  Enrollements        Enrollment[]
  Courses             Course[]
  Payments            Payment[]
  UserCourseProgress  UserCourseProgress[]
  UserChapterProgress UserChapterProgress[]

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Course {
  id          String        @id @default(cuid())
  title       String
  description String?
  imageURL    String?
  price       Float?
  status      PublishStatus @default(DRAFT)
  teacherId   String
  teacher     User          @relation(fields: [teacherId], references: [id])
  chapters    Chapter[]
  enrollments Enrollment[]
  payments    Payment[]
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  UserCourseProgress UserCourseProgress[]

  @@index([teacherId])
}

model Chapter {
  id          String        @id @default(cuid())
  title       String
  sequence    Int
  isFree      Boolean       @default(false)
  description String?
  video       Video?
  imageUrl    String?
  notionDoc   String?
  status      PublishStatus @default(DRAFT)
  courseId    String
  course      Course        @relation(fields: [courseId], references: [id], onDelete: Cascade)
  createdAt   DateTime      @default(now())
  updatedAt   DateTime      @updatedAt

  UserChapterProgress UserChapterProgress[]

  @@index([courseId, sequence])
}

model Video {
  videoId       String      @id @default(cuid())
  chapterId     String      @unique
  status        VideoStatus @default(PENDING)
  rawUrl        String?
  masterUrl     String?
  pendingRawUrl String?
  chapter       Chapter     @relation(fields: [videoId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum VideoStatus {
  PENDING
  UPLOADED
  PROCESSING
  DONE
}

model Enrollment {
  id        String   @id @default(cuid())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
  courseId  String
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())

  @@unique([userId, courseId])
}

model Payment {
  id         String   @id @default(cuid())
  razorpayId String   @unique
  amount     Float
  currency   String
  status     String
  userId     String
  user       User     @relation(fields: [userId], references: [id])
  courseId   String?
  course     Course?  @relation(fields: [courseId], references: [id])
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@index([userId])
  @@index([courseId])
}

model UserCourseProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  courseId    String
  course      Course   @relation(fields: [courseId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  progress    Int      @default(0)
  updatedAt   DateTime @updatedAt

  @@unique([userId, courseId])
}

model UserChapterProgress {
  id          String   @id @default(cuid())
  userId      String
  user        User     @relation(fields: [userId], references: [id])
  chapterId   String
  chapter     Chapter  @relation(fields: [chapterId], references: [id], onDelete: Cascade)
  isCompleted Boolean  @default(false)
  progress    Int      @default(0)
  updatedAt   DateTime @updatedAt

  @@unique([userId, chapterId])
}
